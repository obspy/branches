#	INPUT file for NDLB_part_I.

#	Please note that if you choose (nodes = Y) then:
#	* min_datetime
#	* max_datetime
#	* min_magnitude
#	* max_magnitude
#	will be selected based on INPUT-Periods file.


# -------------------------------------------------------------------------------------------------------------
# Address info:

[Address_info]

address = /media/Elements/Sumatra					; where you want to save the Waveforms, Response files and other information. examples: (/media/Elements/TEST_WAVE) (/export/data/BH) (/import/neptun-radler/hosseini-downloads) (/home/hosseini/Desktop/Mafe)

interactive_address = N									; Interactive Address: Whether you want to give the address interactively or not (for Updating, Quality control, Plotting)

# The target folder (Plotting):
target_folder = /home/hosseini/test/Data/2009-09-29_2009-10-01_7.4_7.6/20090930_0000037/IRIS/eval_kasra		
# The address where you want to save (Figures):
save_folder = /home/hosseini/Desktop/plot_test

# -------------------------------------------------------------------------------------------------------------
#Parameters for event request:

[Event_Request]
min_datetime = 2009-09-29								; min datetime (Please consider "nodes" module and "INPUT-Periods" for parallel requests)
max_datetime = 2009-10-01								; max datetime (Please consider "nodes" module and "INPUT-Periods" for parallel requests)

min_magnitude = 7.4										; min magnitude (Please consider "nodes" module and "INPUT-Periods" for parallel requests)
max_magnitude = 8.0										; max magnitude (Please consider "nodes" module and "INPUT-Periods" for parallel requests)

min_depth = +10			        						; min depth
max_depth = -6000										; max depth

min_longitude = -180									; min longitude (-180) (event)
max_longitude = +180									; max longitude (180) (event)
min_latitude = -90										; min latitude (-90) (event)
max_latitude = +90										; max latitude (90) (event)

time_before = 300										; Time before the Event (sec)
time_after = 4800										; Time after the Event (sec)
	
max_results = 2500										; max Results

# -------------------------------------------------------------------------------------------------------------
# Type of request:

[Request]
get_events = Y											; To get events (Y)
input_period = N										; To generate an INPUT-Periods file automatically
IRIS = Y												; IRIS client will be used (Y)
ArcLink = Y												; ArcLink client will be used (Y)

time_iris = N 											; Calculate and generate files for required time to get each station from IRIS (Y)
time_arc = N											; Calculate and generate files for required time to get each station from ArcLink (Y)

# -------------------------------------------------------------------------------------------------------------
# Parallel?

[Parallel]
# Downloading in Parallel way -- 
# ATTENTION: "nodes" and "INPUT-Periods" 
# --> You should enter the required periods and required magnitudes in "INPUT-Periods" file.
# --> OR you could use "input_period" to generate an INPUT-Periods file automatically
nodes = N

# -------------------------------------------------------------------------------------------------------------
# What do you want to get?

[what_to_get]
waveform = Y											; get Waveforms
response = Y											; get Response file
SAC = Y													; save waveforms in SAC format -- The original format is "MSEED"

# -------------------------------------------------------------------------------------------------------------
# Some specifications about your request:

[specifications_request]
network = *												; Network code, e.g. ‘BW’. (for mass = Y [line 33], wildcards allowed.)
station = *												; Station code, e.g. ‘MANZ’. (for mass = Y [line 33], wildcards allowed.)
location = *											; Location code, e.g. ‘00’. (for mass = Y [line 33], wildcards allowed.)
channel = *												; Channel code, e.g. ‘EHE’. (for mass = Y [line 33], wildcards allowed.)

BHE = N 												; BHE is needed
BHN = N													; BHN is needed
BHZ = Y													; BHZ is needed
other = N												; if you want to download channels other than BHE, BHN, BHZ (or if you want to download BH*) [has not implemented yet]

# ATTENTION: Restricting returned data by geographical coordinates either
# all of minlat, maxlat, minlon and maxlon have to be specified (for a rectangular bounding box) OR 
# all of lat, lon, minradius and maxradius have to be specified (for a circular bounding area)

lon = None												; Latitude of center point for circular bounding area. (get_Networks)
lat = None												; Longitude of center point for circular bounding area. (get_Networks)
minradius = None										; Minimum radius for circular bounding area. (get_Networks)
maxradius = None										; Maximum radius for circular bounding area. (get_Networks)

minlon = None											; Minimum latitude for rectangular bounding box. (get_Networks)
maxlon = None											; Maximum latitude for rectangular bounding box. (get_Networks)
minlat = None											; Minimum longitude for rectangular bounding box. (get_Networks)
maxlat = None											; Maximum longitude for rectangular bounding box. (get_Networks)

# -------------------------------------------------------------------------------------------------------------
# TEST the program?

[test]
TEST = Y												; whether you want to test ObsPyDMT or not
TEST_no = 10											; How many stations you want to test for!

# -------------------------------------------------------------------------------------------------------------
# Update:

[update]
update_interactive = N									; Update in an interactive way (address will be given by user)

update_iris = Y											; Update the IRIS folder
update_arc = Y											; Update the ArcLink folder

num_updating_IRIS = 1									; Number of iterations on IRIS folders for updating
num_updating_ARC = 1									; Number of iterations on ArcLink folders for updating

# -------------------------------------------------------------------------------------------------------------
# Quality Control:

[QC]
QC_IRIS = N												; Quality Control for IRIS
QC_ARC = N												; Quality Control for ArcLink

# -------------------------------------------------------------------------------------------------------------
# Email:

[email]
email = N												; After completing your job, an email will be sent to your mailbox (for each node)
email_address = k.hosseinizad@gmail.com					; Address of your email

# -------------------------------------------------------------------------------------------------------------
# Report:

[report]
report = Y												; After completing your job, a report will be generated in 'Address/Data' (Address is defined in line 4)

# -------------------------------------------------------------------------------------------------------------
# instrument correction:

[instrument_correction]
IRIS_inst = Y											; Instrument Correction for IRIS (Y)
ArcLink_inst = Y										; Instrument Correction for ArcLink (Y)
corr_unit = DIS											; Units to return response in. Can be either DIS, VEL or ACC
pre_filter = (0.008, 0.012, 3.0, 4.0)					; Apply a bandpass filter to the data trace before deconvolution

# -------------------------------------------------------------------------------------------------------------
# Select Seismograms:

[select_seismogram]
phase = [P]											; Seismograms will be selected based on specified phase(s)
freq = 10.0														; All seismograms will be downsampled to 'freq'
model = iasp91											; 'iasp91' or 'ak135'

Available phases = \
 P ,  P'P'ab ,  P'P'bc ,  P'P'df ,  PKKPab ,  PKKPbc ,  PKKPdf ,  PKKSab , \
 PKKSbc ,  PKKSdf ,  PKPab ,  PKPbc ,  PKPdf ,  PKPdiff ,  PKSab ,  PKSbc , \
 PKSdf ,  PKiKP ,  PP ,  PS ,  PcP ,  PcS ,  Pdiff ,  Pn ,  PnPn ,  PnS , \
 S ,  S'S'ac ,  S'S'df ,  SKKPab ,  SKKPbc ,  SKKPdf ,  SKKSac ,  SKKSdf , \
 SKPab ,  SKPbc ,  SKPdf ,  SKSac ,  SKSdf ,  SKiKP ,  SP ,  SPg ,  SPn , \
 SS ,  ScP ,  ScS ,  Sdiff ,  Sn ,  SnSn ,  pP ,  pPKPab ,  pPKPbc , \
 pPKPdf ,  pPKPdiff ,  pPKiKP ,  pPdiff ,  pPn ,  pS ,  pSKSac ,  pSKSdf , \
 pSdiff ,  sP ,  sPKPab ,  sPKPbc ,  sPKPdf ,  sPKPdiff ,  sPKiKP ,  sPb , \
 sPdiff ,  sPg ,  sPn ,  sS ,  sSKSac ,  sSKSdf ,  sSdiff ,  sSn 

# -------------------------------------------------------------------------------------------------------------
# Time/Freq chips:

[TF_chips]
TF_phase = Pdiff											; Cutting TF chips around 'TF_phase'
np_before = 200											; Number of points before estimated arrival time (see 'freq' in select_seismogram)
np_all = 1024											; Number of all points around estimated arrival time (see 'freq' in select_seismogram)
SNR_YN = Y												; Whether Signal to Noise Ratio should be considered or not
SNR_limit = 1.0											; func(Signal/Noise) > SNR_limit

# -------------------------------------------------------------------------------------------------------------
# Plot: (For ObsPyPT [ObsPy Plotting Tool])

[ObsPyPT]
plot_event = N											; Plot the event (Y/N)...ATTENTION: you should have "mpl_toolkits.basemap" already installed. [refer: http://pypi.python.org/pypi/basemap]
plot_sta = Y											; Plot all available stations...ATTENTION: you should have "mpl_toolkits.basemap" already installed. [refer: http://pypi.python.org/pypi/basemap]
plot_ray = N											; Plot ray path from an event to stations...ATTENTION: you should have "mpl_toolkits.basemap" already installed. [refer: http://pypi.python.org/pypi/basemap]

llcrnrlon = -180										; longitude of lower left hand corner of the desired map domain (degrees).
urcrnrlon = 180											; longitude of upper right hand corner of the desired map domain (degrees).
llcrnrlat = -90											; latitude of lower left hand corner of the desired map domain (degrees).
urcrnrlat = 90											; latitude of upper right hand corner of the desired map domain (degrees).

lon_0 = 0												; central Latitude of projection (plot_sta)
lat_0 = 0												; central Longitude of projection (plot_sta)
# -------------------------------------------------------------------------------------------------------------
